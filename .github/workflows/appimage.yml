name: Build Studio AppImage

on:
  schedule:
    - cron: '0 3 * * *'  # Run daily at 03:00 UTC
  workflow_dispatch:
    inputs:
      version:
        description: 'Specific version to build (e.g., v1.5.2)'
        required: false
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '22.12.0'  # Required by node-abi package
  ARTIFACTS_DIR: 'build'   # Directory where cli:build outputs the binary

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get release version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "Using manually specified version: ${{ github.event.inputs.version }}"
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            latest=$(curl -s https://api.github.com/repos/Automattic/studio/releases/latest | jq -r .tag_name)
            echo "Latest Studio version: $latest"
            echo "version=$latest" >> $GITHUB_OUTPUT
          fi

      - name: Check existing release
        id: check_release
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if gh release view "$VERSION"; then
            echo "Release $VERSION already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
            if [ "${{ github.event_name }}" = "schedule" ]; then
              echo "Scheduled build - exiting as release exists"
              exit 0
            fi
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup build environment
        run: |
          # Download source code
          curl -L "https://github.com/Automattic/studio/archive/refs/tags/${{ steps.version.outputs.version }}.tar.gz" -o studio.tar.gz
          tar xzf studio.tar.gz
          mv studio-* studio

          # Download AppImage tools
          wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool

          # Download node for bundling
          wget -q https://nodejs.org/dist/v${{ env.NODE_VERSION }}/node-v${{ env.NODE_VERSION }}-linux-x64.tar.xz
          tar xf node-v${{ env.NODE_VERSION }}-linux-x64.tar.xz
          mv node-v${{ env.NODE_VERSION }}-linux-x64 node-bundle

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update || exit 1
          for pkg in libgtk-3-dev libnss3 libxss1 libasound2 libxtst6 libx11-xcb-dev libdrm-dev libgbm-dev \
                    libxcomposite-dev libxrandr-dev libxdamage-dev libxfixes-dev libxext-dev libxinerama-dev \
                    libxkbcommon-dev libxrender-dev libxshmfence-dev libx11-dev libxau-dev libxdmcp-dev \
                    imagemagick fuse libfuse2 libuv1-dev; do
            sudo apt-get install -y $pkg || {
              echo "Failed to install $pkg"
              exit 1
            }
          done

      - name: Build Studio
        run: |
          cd studio
          echo "Installing dependencies..."
          npm ci

          echo "Building application..."
          NODE_ENV=production npm run cli:build || {
            echo "Error: Build failed"
            exit 1
          }

          echo -e "\nListing build output:"
          ls -la dist/cli/

      - name: Create AppDir
        run: |
          set -e
          APPDIR=AppDir
          STUDIO_DIST=studio/dist/cli
          STUDIO_NODE_MODULES=studio/node_modules
          ICON_SRC=""
          ICON_DST1="$APPDIR/usr/share/icons/hicolor/256x256/apps/studio.png"
          ICON_DST2="$APPDIR/studio.png"

          echo "Creating AppDir structure..."
          mkdir -p $APPDIR/usr/bin
          mkdir -p $APPDIR/usr/lib
          mkdir -p $APPDIR/usr/share/applications
          mkdir -p $APPDIR/usr/share/icons/hicolor/256x256/apps
          mkdir -p $APPDIR/opt/studio/app

          # Copy Node.js runtime and built-in modules
          echo "Copying Node.js runtime..."
          cp -r node-bundle/{bin,lib,include,share} $APPDIR/opt/studio/

          # Copy application files
          echo "Copying application files..."
          cp -r $STUDIO_DIST/* $APPDIR/opt/studio/app/
          if [ -d "$STUDIO_NODE_MODULES" ]; then
            cp -r $STUDIO_NODE_MODULES $APPDIR/opt/studio/app/
          fi

          # Create wrapper script
          cat > $APPDIR/usr/bin/studio << 'WRAPPER_EOF'
#!/bin/bash
HERE="$(dirname "$(readlink -f "${0}")")"
export APPDIR="$(dirname "$(dirname "$HERE")")"
export PATH="${APPDIR}/opt/studio/bin:${PATH}"
export LD_LIBRARY_PATH="${APPDIR}/opt/studio/lib:${APPDIR}/usr/lib:${LD_LIBRARY_PATH:-}"
export NODE_PATH="${APPDIR}/opt/studio/app/node_modules"

exec "${APPDIR}/opt/studio/bin/node" "${APPDIR}/opt/studio/app/main.js" "$@"
WRAPPER_EOF
          chmod +x $APPDIR/usr/bin/studio

          # Create AppRun
          cat > $APPDIR/AppRun << 'APPRUN_EOF'
#!/bin/bash
HERE="$(dirname "$(readlink -f "${0}")")"
export APPDIR="$HERE"
export PATH="${APPDIR}/opt/studio/bin:${PATH}"
export LD_LIBRARY_PATH="${APPDIR}/opt/studio/lib:${APPDIR}/usr/lib:${LD_LIBRARY_PATH:-}"
export NODE_PATH="${APPDIR}/opt/studio/app/node_modules"

exec "${APPDIR}/usr/bin/studio" "$@"
APPRUN_EOF
          chmod +x $APPDIR/AppRun

          # Create desktop entry
          cat > $APPDIR/studio.desktop << 'DESKTOP_EOF'
[Desktop Entry]
Name=Studio
Exec=studio %U
Icon=studio
Type=Application
Categories=Development;
MimeType=x-scheme-handler/wpcom-local-dev;
X-AppImage-Version=${{ steps.version.outputs.version }}
DESKTOP_EOF

          # Copy icon
          if [ -f "studio/icon.png" ]; then
            ICON_SRC="studio/icon.png"
          elif [ -f "icon.png" ]; then
            ICON_SRC="icon.png"
          fi

          if [ -n "$ICON_SRC" ]; then
            cp "$ICON_SRC" "$ICON_DST1"
            cp "$ICON_SRC" "$ICON_DST2"
          else
            echo "Warning: Icon file not found, using default icon"
            convert -size 256x256 xc:transparent -font DejaVu-Sans -pointsize 24 -gravity center -draw "text 0,0 'Studio'" "$ICON_DST2"
            cp "$ICON_DST2" "$ICON_DST1"
          fi

      - name: Build AppImage
        run: |
          # Ensure FUSE is loaded
          sudo modprobe fuse || true
          sudo chmod 666 /dev/fuse || true
          sudo chown root:$USER /dev/fuse || true
          
          # Validate AppDir structure
          echo "Validating AppDir structure..."
          find AppDir -type f -name "studio" -exec file {} \;
          ls -la AppDir/usr/bin/
          ls -la AppDir/opt/studio/bin/
          ls -la AppDir/opt/studio/app/
          
          # Build AppImage with verbose output
          echo "Building AppImage..."
          ARCH=x86_64 ./appimagetool -v AppDir Studio-${{ steps.version.outputs.version }}-x86_64.AppImage
          
          # Check AppImage size
          echo "AppImage details:"
          ls -lh Studio-${{ steps.version.outputs.version }}-x86_64.AppImage

      - name: Test AppImage
        run: |
          chmod +x Studio-${{ steps.version.outputs.version }}-x86_64.AppImage
          ./Studio-${{ steps.version.outputs.version }}-x86_64.AppImage --version || echo "Version check failed but continuing..."

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Studio ${{ steps.version.outputs.version }}
          prerelease: ${{ github.event.inputs.prerelease && 'true' || 'false' }}
          body: |
            # Studio AppImage ${{ steps.version.outputs.version }}
            
            This is an unofficial AppImage build of [Studio by WordPress.com](https://github.com/Automattic/studio).
            
            ## Quick Start
            ```bash
            # 1. Download the AppImage
            # 2. Make it executable:
            chmod +x Studio-${{ steps.version.outputs.version }}-x86_64.AppImage
            # 3. Run it:
            ./Studio-${{ steps.version.outputs.version }}-x86_64.AppImage
            ```
            
            ## System Requirements
            - Linux operating system
            - FUSE library
            
            ### Installing FUSE
            Choose your distribution:
            
            **Debian/Ubuntu**:
            ```bash
            sudo apt-get install libfuse2
            ```
            
            **Fedora**:
            ```bash
            sudo dnf install fuse
            ```
            
            **Arch Linux**:
            ```bash
            sudo pacman -S fuse2
            ```
            
            ## Release Notes
            - Built from Studio version ${{ steps.version.outputs.version }}
            - Bundled with Node.js ${{ env.NODE_VERSION }}
            - Created on: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
            
            ## Disclaimer
            This is not an official package and is not affiliated with WordPress.com or Automattic Inc.
            Provided "as is" without warranty of any kind, express or implied.
            Use at your own risk.
          file: Studio-${{ steps.version.outputs.version }}-x86_64.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}