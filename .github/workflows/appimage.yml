name: Build Studio AppImage

on:
  schedule:
    - cron: '0 3 * * *'  # Run daily at 03:00 UTC
  workflow_dispatch:
    inputs:
      version:
        description: 'Specific version to build (e.g., v1.5.2)'
        required: false
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '22.12.0'  # Required by node-abi package
  ARTIFACTS_DIR: 'build'   # Directory where cli:build outputs the binary

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get release version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "Using manually specified version: ${{ github.event.inputs.version }}"
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            latest=$(curl -s https://api.github.com/repos/Automattic/studio/releases/latest | jq -r .tag_name)
            echo "Latest Studio version: $latest"
            echo "version=$latest" >> $GITHUB_OUTPUT
          fi

      - name: Check existing release
        id: check_release
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if gh release view "$VERSION"; then
            echo "Release $VERSION already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
            if [ "${{ github.event_name }}" = "schedule" ]; then
              echo "Scheduled build - exiting as release exists"
              exit 0
            fi
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup build environment
        run: |
          # Download source code
          curl -L "https://github.com/Automattic/studio/archive/refs/tags/${{ steps.version.outputs.version }}.tar.gz" -o studio.tar.gz
          tar xzf studio.tar.gz
          mv studio-* studio

          # Download AppImage tools
          wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update || exit 1
          for pkg in libgtk-3-dev libnss3 libxss1 libasound2t64 libxtst6 libx11-xcb-dev libdrm-dev libgbm-dev libxcomposite-dev libxrandr-dev libxdamage-dev libxfixes-dev libxext-dev libxinerama-dev libxkbcommon-dev libxrender-dev libxshmfence-dev libx11-dev libxau-dev libxdmcp-dev; do
            sudo apt-get install -y $pkg || {
              echo "Failed to install $pkg"
              exit 1
            }
          done

      - name: Build Studio
        run: |
          cd studio
          echo "Installing dependencies..."
          npm ci
          echo "Building application..."
          npm run cli:build || {
            echo "Error: Build failed"
            exit 1
          }
          
          # Print npm scripts to see what's available
          echo "Available npm scripts:"
          npm run | grep -E "build|dist|cli"
          
          # Check directory structure after build
          echo -e "\nChecking directory structure after build:"
          echo "Current directory contents:"
          ls -la
          
          echo -e "\nListing all build-related directories:"
          find . -type d -name "dist" -o -name "build" -o -name "out" | while read dir; do
            echo -e "\nContents of $dir:"
            ls -la "$dir" 2>/dev/null
          done

      - name: Create AppDir
        run: |
          echo "Finding build output..."
          cd studio
          
          # Check build directory structure
          echo "Contents of current directory:"
          ls -la
          
          if [ -d "cli/dist" ]; then
            BUILD_DIR="cli/dist"
          elif [ -d "dist" ]; then
            BUILD_DIR="dist"
          else
            echo "Error: Could not find build directory"
            echo "Listing all directories:"
            find . -type d
            exit 1
          fi
          
          echo "Found build directory: $BUILD_DIR"
          echo "Contents of build directory:"
          ls -la "$BUILD_DIR"
          cd ..

          # Create AppDir structure
          mkdir -p AppDir/usr/{bin,share/{applications,icons/hicolor/256x256/apps}}
          
          # Copy application files
          cp -r "$BUILD_DIR"/* AppDir/usr/bin/
          
          # Create desktop entry
          cat > AppDir/usr/share/applications/studio.desktop << EOF
          [Desktop Entry]
          Name=Studio
          Exec=studio %U
          Icon=studio
          Type=Application
          Categories=Development;
          MimeType=x-scheme-handler/wpcom-local-dev;
          X-AppImage-Version=${{ steps.version.outputs.version }}
          EOF
          
          # Copy icon and desktop file
          cp studio/resources/icon.png AppDir/usr/share/icons/hicolor/256x256/apps/studio.png
          cp AppDir/usr/share/applications/studio.desktop AppDir/
          ln -s usr/share/icons/hicolor/256x256/apps/studio.png AppDir/studio.png

      - name: Build AppImage
        run: |
          ./appimagetool AppDir Studio-${{ steps.version.outputs.version }}.AppImage

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Studio ${{ steps.version.outputs.version }}
          prerelease: ${{ github.event.inputs.prerelease }}
          body: |
            # Studio AppImage ${{ steps.version.outputs.version }}
            
            This is an unofficial AppImage build of [Studio by WordPress.com](https://github.com/Automattic/studio).
            
            ## Quick Start
            ```bash
            # 1. Download the AppImage
            # 2. Make it executable:
            chmod +x Studio-${{ steps.version.outputs.version }}.AppImage
            # 3. Run it:
            ./Studio-${{ steps.version.outputs.version }}.AppImage
            ```
            
            ## System Requirements
            - Linux operating system
            - FUSE library
            
            ### Installing FUSE
            Choose your distribution:
            
            **Debian/Ubuntu**:
            ```bash
            sudo apt-get install libfuse2
            ```
            
            **Fedora**:
            ```bash
            sudo dnf install fuse
            ```
            
            **Arch Linux**:
            ```bash
            sudo pacman -S fuse2
            ```
            
            ## Release Notes
            - Built from Studio version ${{ steps.version.outputs.version }}
            - Created on: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
            
            ## Disclaimer
            This is not an official package and is not affiliated with WordPress.com or Automattic Inc.
            Provided "as is" without warranty of any kind, express or implied.
            Use at your own risk.
          files: Studio-${{ steps.version.outputs.version }}.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}