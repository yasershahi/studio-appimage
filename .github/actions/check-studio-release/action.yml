name: 'Check Studio Release'
description: 'Check if there is a new Studio release available from the official repository'

inputs:
  current_version:
    description: 'Current version of Studio (without v prefix)'
    required: true
    default: '0.0.0'
  github_token:
    description: 'GitHub token for API authentication'
    required: false
    default: ''
  repository:
    description: 'Repository to check for releases'
    required: false
    default: 'Automattic/studio'

outputs:
  new_release:
    description: 'Whether there is a new release (true/false)'
    value: ${{ steps.check.outputs.new_release }}
  version:
    description: 'Latest version number without v prefix'
    value: ${{ steps.check.outputs.version }}
  current_version:
    description: 'Current version provided as input'
    value: ${{ inputs.current_version }}
  error:
    description: 'Error message if check failed'
    value: ${{ steps.check.outputs.error }}

runs:
  using: "composite"
  steps:
    - name: Check for new release
      id: check
      shell: bash
      run: |
        set -euo pipefail
        
        # Initialize variables
        REPO="${{ inputs.repository }}"
        CURRENT_VERSION="${{ inputs.current_version }}"
        AUTH_HEADER=""
        
        # Add authentication if token provided
        if [ -n "${{ inputs.github_token }}" ]; then
          AUTH_HEADER="Authorization: token ${{ inputs.github_token }}"
        fi
        
        # Fetch latest release
        echo "Checking latest release for ${REPO}..."
        if ! RESPONSE=$(curl -sS ${AUTH_HEADER:+-H "$AUTH_HEADER"} \
          "https://api.github.com/repos/${REPO}/releases/latest"); then
          echo "error=Failed to fetch release info" >> $GITHUB_OUTPUT
          echo "new_release=false" >> $GITHUB_OUTPUT
          echo "version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Extract version and compare
        LATEST_VERSION=$(echo "$RESPONSE" | jq -r '.tag_name' | sed 's/^v//')
        if [ -z "$LATEST_VERSION" ]; then
          echo "error=Invalid release version format" >> $GITHUB_OUTPUT
          echo "new_release=false" >> $GITHUB_OUTPUT
          echo "version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "Current version: ${CURRENT_VERSION}"
        echo "Latest version: ${LATEST_VERSION}"
        
        # Compare versions
        if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ]; then
          echo "New version available!"
          echo "new_release=true" >> $GITHUB_OUTPUT
          echo "version=${LATEST_VERSION}" >> $GITHUB_OUTPUT
        else
          echo "Already at latest version"
          echo "new_release=false" >> $GITHUB_OUTPUT
          echo "version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
        fi
        echo "error=" >> $GITHUB_OUTPUT